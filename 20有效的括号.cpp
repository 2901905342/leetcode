//给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。
//有效字符串需满足：
//左括号必须用相同类型的右括号闭合。
//左括号必须以正确的顺序闭合。

/////////////思路///////////
//判断括号的有效性可以使用「栈」这一数据结构来解决。
//我们遍历给定的字符串 s。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶。
//当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。
//如果不是相同的类型，或者栈中并没有左括号，那么字符串 ss 无效，返回 False。为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号。
//在遍历结束后，如果栈中没有左括号，说明我们将字符串 ss 中的所有左括号闭合，返回 True，否则返回 False。
//注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回 False，省去后续的遍历判断过程。

#include "myhead.h"
class Solution {
public:
    bool isValid(string s) {
        if (s.size() % 2 != 0) return false;
        unordered_map<char, char> pair = {
            {')','('},
            {']','['},
            {'}','{'}
        };   //无序map用于存储括号间的对应关系
        stack<char> zhan;  //
        for (char ch : s) {
            
            if (pair.count(ch)) {
                //  pair.count(ch)统计pair中key为ch的对的个数
                //当为1时，说明ch为右括号中的其中一个
                if (zhan.empty() || zhan.top() != pair[ch]) {
                    // 当ch为右括号时，若此时栈为空   或者栈顶元素不是对应的左括号 可以直接返回false
                    return false;
                }
                zhan.pop(); //栈顶匹配的左括号退栈
            }
            else {
                zhan.push(ch);
            }
        }
        return zhan.empty();//经过各种遍历后栈为空栈时，说明字符串中括号闭合
    }
};