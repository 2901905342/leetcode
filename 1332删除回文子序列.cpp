//给你一个字符串 s，它仅由字母 'a' 和 'b' 组成。每一次删除操作都可以从 s 中删除一个回文 子序列。
//返回删除给定字符串中所有字符（字符串为空）的最小删除次数。
//「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。
//「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。

///////////////思路 ： 纯粹脑筋急转弯
///由于字符串本身只含有字母 ‘a’ 和 ‘b’两种字符，
//题目要求每次删除回文子序列（不一定连续）而使得字符串最终为空。
//题目中只包含两种不同的字符，由于相同的字符组成的子序列一定是回文子序列，因此最多只需要删除 2 次即可删除所有的字符。

#include "myhead.h"
class Solution {
public:
    int removePalindromeSub(string s) {
        int flag = 0;
        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            if (s[i] != s[j]) {
                flag = 1;
                break;
            }
            i++;
            j--;
        }
        return flag + 1;
    }
};